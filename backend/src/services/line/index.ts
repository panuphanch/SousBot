import { Client, WebhookEvent, MessageEvent, FollowEvent, QuickReply } from '@line/bot-sdk';
import { UserRepository, ProductRepository, OrderRepository } from '../../repositories/firebase';
import { User } from '../../types';

enum CommandType {
  MENU = 'üç∞ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π',
  ORDER = 'üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
  DAILY_SUMMARY = 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
  STOCK = 'üì¶ ‡∏î‡∏π‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
  TODAY_ORDERS = 'üìÖ ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
  WEEKLY_SUMMARY = 'üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ',
  MONTHLY_SUMMARY = 'üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'
}

export class LineService {
  private client: Client;
  private userRepo: UserRepository;
  private productRepo: ProductRepository;
  private orderRepo: OrderRepository;

  constructor(config: any) {
    this.client = new Client(config);
    this.userRepo = new UserRepository();
    this.productRepo = new ProductRepository();
    this.orderRepo = new OrderRepository();
  }

  // Main webhook handler - similar to ASP.NET controller action
  async handleWebhook(events: WebhookEvent[]): Promise<void> {
    // Process events in parallel like Task.WhenAll
    await Promise.all(
      events.map(async (event) => {
        try {
          if (event.type === 'message') {
            await this.handleMessage(event);
          } else if (event.type === 'follow') {
            await this.handleFollow(event);
          }
        } catch (error) {
          console.error(`Error handling event: ${error}`);
          // Send friendly error message
          if ('replyToken' in event) {
            await this.client.replyMessage(event.replyToken, {
              type: 'text',
              text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÄ‡∏à‡πâ‡∏≤ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πâ‡∏≠‡πÄ‡∏à‡πâ‡∏≤'
            });
          }
        }
      })
    );
  }

  private async handleMessage(event: MessageEvent): Promise<void> {
    if (event.message.type !== 'text') return;

    const userId = event.source.userId;
    if (!userId) return;

    const text = event.message.text.trim();
    
    // Check if user exists, similar to Entity Framework's FirstOrDefault
    const user = await this.userRepo.getByLineUserId(userId);
    if (!user) {
      await this.client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÄ‡∏à‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡πÄ‡∏à‡πâ‡∏≤ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡πâ‡∏≠'
      });
      return;
    }

    // Main command handler - similar to C# switch expression
    if (text === '‡∏™‡∏°‡∏û‡∏£') {
      await this.sendMainMenu(event.replyToken);
    } else if (Object.values(CommandType).includes(text as CommandType)) {
      await this.handleCommand(text as CommandType, event.replyToken, user);
    } else {
      await this.handleFreeTextInput(text, event.replyToken, user);
    }
  }

  private async handleFollow(event: FollowEvent): Promise<void> {
    const userId = event.source.userId;
    if (!userId) return;
    
    const profile = await this.client.getProfile(userId);
    const liffUrl = `https://liff.line.me/${process.env.LIFF_ID}/register/${userId}`;
    
    // Send welcome message with LIFF link
    await this.client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÄ‡∏à‡πâ‡∏≤ ${profile.displayName} üôè\n‡∏™‡∏°‡∏û‡∏£‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤ ‡∏°‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏ô‡πâ‡∏≠\n\n‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πâ‡∏≠ üëá\n${liffUrl}`
    });
  }

  private async sendMainMenu(replyToken: string): Promise<void> {
    const quickReply: QuickReply = {
      items: Object.values(CommandType).map(command => ({
        type: "action" as const, // Use literal type "action"
        action: {
          type: "message" as const, // Use literal type "message"
          label: command,
          text: command
        }
      }))
    };

    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: '‡∏™‡∏°‡∏û‡∏£‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡πâ‡∏≤! ‡∏°‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏±‡∏ô‡πÄ‡∏ô‡πâ‡∏≠ üßÅ',
      quickReply
    });
  }

  private async handleCommand(command: CommandType, replyToken: string, user: User): Promise<void> {
    switch (command) {
      case CommandType.MENU:
        // Open LIFF page for menu management
        await this.openLiffPage(replyToken, 'menu-management', user.lineUserId);
        break;
      
      case CommandType.ORDER:
        // Open LIFF page for order management
        await this.openLiffPage(replyToken, 'order-management', user.lineUserId);
        break;
      
      case CommandType.DAILY_SUMMARY:
        await this.sendDailySummary(replyToken, user);
        break;
      
      case CommandType.STOCK:
        await this.sendStockStatus(replyToken, user);
        break;

      // Add other command handlers
    }
  }

  private async openLiffPage(replyToken: string, page: string, userId: string): Promise<void> {
    const liffUrl = `https://liff.line.me/${process.env.LIFF_ID}/${page}/${userId}`;
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: `‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡πâ‡∏≠‡πÄ‡∏à‡πâ‡∏≤ üëá\n${liffUrl}`
    });
  }

  private async sendDailySummary(replyToken: string, user: User): Promise<void> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const orders = await this.orderRepo.getTodayOrders(user.lineUserId);
    const totalRevenue = orders.reduce((sum, order) => sum + order.totalAmount, 0);
    const totalOrders = orders.length;

    // Format the currency with Thai Baht
    const formattedRevenue = new Intl.NumberFormat('th-TH', {
        style: 'decimal',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(totalRevenue);

    const message = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡πâ‡∏≤\n\n` +
      `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${totalOrders}\n` +
      `‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°: ${formattedRevenue} ‡∏ö‡∏≤‡∏ó`;

    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: message
    });
  }

  private async sendStockStatus(replyToken: string, user: User): Promise<void> {
    const products = await this.productRepo.getByOwner(user.lineUserId);
    
    // Filter to show only available products and sort by stock level (lowest first)
    const stockStatus = products
      .filter(p => p.isAvailable)
      .sort((a, b) => a.stockQuantity - b.stockQuantity)
      .map(p => {
        const stockEmoji = p.stockQuantity === 0 ? '‚ùå' : 
                          p.stockQuantity < 5 ? '‚ö†Ô∏è' : '‚úÖ';
        return `${stockEmoji} ${p.name}: ${p.stockQuantity} ‡∏ä‡∏¥‡πâ‡∏ô`;
      })
      .join('\n');

    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: `üì¶ ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤\n\n${stockStatus}`
    });
  }

  private async handleFreeTextInput(text: string, replyToken: string, user: User): Promise<void> {
    // Convert text to lowercase for easier matching
    const lowerText = text.toLowerCase();
    
    // Helper function for fuzzy command matching
    const isPartialMatch = (command: string): boolean => {
        const commandLower = command.toLowerCase();
        return commandLower.includes(lowerText) || lowerText.includes(commandLower);
    };

    try {
        // Check for stock-related queries
        if (lowerText.includes('‡∏™‡∏ï‡πá‡∏≠‡∏Å') || lowerText.includes('‡πÄ‡∏´‡∏•‡∏∑‡∏≠')) {
            await this.sendStockStatus(replyToken, user);
            return;
        }

        // Check for order-related queries
        if (lowerText.includes('‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå') || lowerText.includes('order')) {
            await this.sendDailySummary(replyToken, user);
            return;
        }

        // Check for menu-related queries
        if (lowerText.includes('‡πÄ‡∏°‡∏ô‡∏π') || lowerText.includes('menu')) {
            await this.client.replyMessage(replyToken, {
                type: 'text',
                text: '‡∏à‡∏∞‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡πÄ‡∏à‡πâ‡∏≤? ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üç∞ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÄ‡∏ô‡πâ‡∏≠',
                quickReply: {
                    items: [{
                        type: "action" as const,
                        action: {
                            type: "message" as const,
                            label: CommandType.MENU,
                            text: CommandType.MENU
                        }
                    }]
                }
            });
            return;
        }

        // Check if text might be a partial command match
        const possibleCommands = Object.values(CommandType)
            .filter(isPartialMatch);

        if (possibleCommands.length > 0) {
            // If we found similar commands, suggest them
            const commandSuggestions = possibleCommands
                .map(cmd => `‚Ä¢ ${cmd}`)
                .join('\n');

            await this.client.replyMessage(replyToken, {
                type: 'text',
                text: `‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?\n\n${commandSuggestions}\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏°‡∏û‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ô‡πâ‡∏≠`
            });
            return;
        }

        // Default response for unrecognized input
        await this.client.replyMessage(replyToken, {
            type: 'text',
            text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÄ‡∏à‡πâ‡∏≤ ‡∏™‡∏°‡∏û‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏°‡∏û‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ô‡πâ‡∏≠'
        });

    } catch (error) {
        console.error('Error in handleFreeTextInput:', error);
        await this.client.replyMessage(replyToken, {
            type: 'text',
            text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÄ‡∏à‡πâ‡∏≤ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ô‡πâ‡∏≠'
        });
    }
  }
}